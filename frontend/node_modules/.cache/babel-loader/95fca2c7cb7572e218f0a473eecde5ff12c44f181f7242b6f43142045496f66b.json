{"ast":null,"code":"import { VueGoodTable } from \"vue-good-table\";\nimport Task from \"@/app/task/domain/entities/Task\";\nimport { TaskRepositoryImpl } from \"@/app/task/infrastructure/repositories/TaskRepositoryImpl\";\nimport { ListTaskUseCase, DeleteTaskUseCase } from \"@/app/task/usecases\";\nimport { TableRequest, Order } from \"@/app/global/requests/dtos/TableRequest.ts\";\nimport \"vue-good-table/dist/vue-good-table.css\";\nimport TaskForm from \"@/app/task/interfaces/presentation/components/TaskForm\";\nimport Modal from \"@/components/Modal\";\nimport { Dropdown, DropdownItem, DropdownMenu, Table, TableColumn } from \"element-ui\";\nexport default {\n  components: {\n    [Dropdown.name]: Dropdown,\n    [DropdownItem.name]: DropdownItem,\n    [DropdownMenu.name]: DropdownMenu,\n    [Table.name]: Table,\n    [TableColumn.name]: TableColumn,\n    [VueGoodTable.name]: VueGoodTable,\n    [TaskForm.name]: TaskForm,\n    [Modal.name]: Modal\n  },\n  data() {\n    return {\n      rows: [],\n      columns: [{\n        field: \"id\",\n        label: \"Id\"\n      }, {\n        field: \"name\",\n        label: \"Name\"\n      }, {\n        field: \"description\",\n        label: \"Description\"\n      }, {\n        field: \"priority\",\n        label: \"Priority\"\n      }, {\n        field: \"completed\",\n        label: \"Completed\"\n      }, {\n        field: \"expires_at\",\n        label: \"expires_at\"\n      }, {\n        label: \"Acciones\",\n        field: \"actions\",\n        sortable: false\n        // width: \"120px\",\n      }],\n      query: {\n        limit: 10,\n        offset: 0,\n        order: Order.ASC,\n        current_page: 1,\n        sort_column: \"id\",\n        sort_direction: Order.ASC,\n        search: \"\"\n      },\n      showModal: false,\n      formData: {\n        name: \"\",\n        description: null,\n        priority: \"low\",\n        completed: false,\n        expires_at: null\n      }\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      // store.isShowMainLoader = true;\n      try {\n        console.log(\"seses\");\n        const taskRepository = new TaskRepositoryImpl();\n        const listTaskUseCase = new ListTaskUseCase(taskRepository);\n        const data = await listTaskUseCase.execute(this.query);\n        console.log(data.data);\n        this.rows = data.data.data;\n        this.totalItems = data.data.total;\n      } catch (error) {\n        console.error(\"Error fetching categories\", error);\n      } finally {\n        // store.isShowMainLoader = false;\n      }\n    },\n    onModalShown() {\n      // Aquí ya puedes acceder al ref porque el componente TaskForm se ha creado\n      this.$refs.taskForm.formData = {\n        name: \"\",\n        description: null,\n        priority: \"low\",\n        completed: false,\n        expires_at: null\n      };\n    },\n    editTask(task) {\n      console.log(task);\n      console.log(\"Editando tarea:\", JSON.parse(JSON.stringify(task)));\n      this.showModal = true;\n\n      // Pasar los datos al formulario y abrir el modal\n      this.$nextTick(() => {\n        if (this.$refs.taskForm) {\n          this.$refs.taskForm.formData = JSON.parse(JSON.stringify(task));\n        } else {\n          console.warn(\"No se encontró taskForm\");\n        }\n      });\n    },\n    openModal() {\n      this.showModal = true;\n    },\n    handleSubmit(bvModalEvent) {\n      bvModalEvent.preventDefault();\n      if (this.$refs.taskForm) {\n        this.$refs.taskForm.$el.dispatchEvent(new Event(\"submit\"));\n      }\n    },\n    async deleteTask(id) {\n      // this.boxOne = \"\";\n      this.$bvModal.msgBoxConfirm(\"¿Estás seguro de eliminar esta tarea?\").then(async value => {\n        const taskRepository = new TaskRepositoryImpl();\n        const deleteTaskUseCase = new DeleteTaskUseCase(taskRepository);\n        await deleteTaskUseCase.execute(id);\n      }).catch(err => {\n        // An error occurred\n      }).finally(() => {\n        this.fetchData(); // Recargar tabla\n      });\n    },\n    handleTaskUpdated(updatedTask) {\n      this.fetchData();\n      this.showModal = false;\n    }\n  }\n};","map":{"version":3,"names":["VueGoodTable","Task","TaskRepositoryImpl","ListTaskUseCase","DeleteTaskUseCase","TableRequest","Order","TaskForm","Modal","Dropdown","DropdownItem","DropdownMenu","Table","TableColumn","components","name","data","rows","columns","field","label","sortable","query","limit","offset","order","ASC","current_page","sort_column","sort_direction","search","showModal","formData","description","priority","completed","expires_at","mounted","fetchData","methods","console","log","taskRepository","listTaskUseCase","execute","totalItems","total","error","onModalShown","$refs","taskForm","editTask","task","JSON","parse","stringify","$nextTick","warn","openModal","handleSubmit","bvModalEvent","preventDefault","$el","dispatchEvent","Event","deleteTask","id","$bvModal","msgBoxConfirm","then","value","deleteTaskUseCase","catch","err","finally","handleTaskUpdated","updatedTask"],"sources":["src/app/task/interfaces/presentation/views/TaskView.vue"],"sourcesContent":["<template>\n  <div>\n    <base-header class=\"pb-6 pb-8 pt-5 pt-md-8 bg-gradient-success\">\n      <!-- Card stats -->\n      <b-row>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Total traffic\"\n            type=\"gradient-red\"\n            sub-title=\"350,897\"\n            icon=\"ni ni-active-40\"\n            class=\"mb-4\"\n          >\n            <template slot=\"footer\">\n              <span class=\"text-success mr-2\">3.48%</span>\n              <span class=\"text-nowrap\">Since last month</span>\n            </template>\n          </stats-card>\n        </b-col>\n      </b-row>\n    </base-header>\n    <b-container fluid class=\"mt-7\">\n      <b-row>\n        <b-col>\n          <b-card>\n            <b-card-header\n              class=\"d-flex justify-content-between align-items-center\"\n            >\n              <strong>Tasks</strong>\n              <b-button variant=\"primary\" size=\"sm\" @click=\"openModal\"\n                >Nueva Tarea</b-button\n              >\n            </b-card-header>\n            <b-card-body>\n              <vue-good-table :columns=\"columns\" :rows=\"rows\">\n                <template #table-row=\"props\">\n                  <!-- Columna: Completada -->\n                  <span v-if=\"props.column.field === 'completed'\">\n                    <b-icon\n                      :icon=\"\n                        props.row.completed == 1\n                          ? 'check-circle-fill'\n                          : 'x-circle-fill'\n                      \"\n                      :variant=\"props.row.completed == 1 ? 'success' : 'danger'\"\n                      scale=\"1.2\"\n                    ></b-icon>\n                  </span>\n\n                  <!-- Columna: Acciones -->\n                  <span v-else-if=\"props.column.field === 'actions'\">\n                    <b-button\n                      variant=\"warning\"\n                      size=\"sm\"\n                      @click=\"editTask(props.row)\"\n                    >\n                      Editar\n                    </b-button>\n                    <b-button\n                      variant=\"danger\"\n                      size=\"sm\"\n                      @click=\"deleteTask(props.row.id)\"\n                      class=\"ml-1\"\n                    >\n                      Borrar\n                    </b-button>\n                  </span>\n\n                  <span v-else-if=\"props.column.field === 'expires_at'\">\n                    {{ props.row.expires_at }}\n                    <b-badge\n                      v-if=\"isDateExpired(props.row.expires_at)\"\n                      variant=\"danger\"\n                      class=\"ml-1\"\n                      >{{ props.row.expires_at }}</b-badge\n                    >\n                  </span>\n\n                  <!-- Otras columnas -->\n                  <span v-else>\n                    {{ props.formattedRow[props.column.field] }}\n                  </span>\n                </template>\n              </vue-good-table>\n            </b-card-body>\n          </b-card>\n        </b-col>\n      </b-row>\n    </b-container>\n\n    <!-- Modal con formulario -->\n    <b-modal\n      hide-footer\n      v-model=\"showModal\"\n      title=\"Nueva Tarea\"\n      @ok=\"handleSubmit\"\n      @shown=\"onModalShown\"\n    >\n      <TaskForm\n        ref=\"taskForm\"\n        @task-updated=\"handleTaskUpdated\"\n        @close=\"showModal = false\"\n      />\n    </b-modal>\n  </div>\n</template>\n<script>\nimport { VueGoodTable } from \"vue-good-table\";\nimport Task from \"@/app/task/domain/entities/Task\";\nimport { TaskRepositoryImpl } from \"@/app/task/infrastructure/repositories/TaskRepositoryImpl\";\nimport { ListTaskUseCase, DeleteTaskUseCase } from \"@/app/task/usecases\";\nimport {\n  TableRequest,\n  Order,\n} from \"@/app/global/requests/dtos/TableRequest.ts\";\nimport \"vue-good-table/dist/vue-good-table.css\";\nimport TaskForm from \"@/app/task/interfaces/presentation/components/TaskForm\";\nimport Modal from \"@/components/Modal\";\n\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  Table,\n  TableColumn,\n} from \"element-ui\";\n\nexport default {\n  components: {\n    [Dropdown.name]: Dropdown,\n    [DropdownItem.name]: DropdownItem,\n    [DropdownMenu.name]: DropdownMenu,\n    [Table.name]: Table,\n    [TableColumn.name]: TableColumn,\n    [VueGoodTable.name]: VueGoodTable,\n    [TaskForm.name]: TaskForm,\n    [Modal.name]: Modal,\n  },\n  data() {\n    return {\n      rows: [],\n      columns: [\n        { field: \"id\", label: \"Id\" },\n        { field: \"name\", label: \"Name\" },\n        { field: \"description\", label: \"Description\" },\n        { field: \"priority\", label: \"Priority\" },\n        { field: \"completed\", label: \"Completed\" },\n        { field: \"expires_at\", label: \"expires_at\" },\n        {\n          label: \"Acciones\",\n          field: \"actions\",\n          sortable: false,\n          // width: \"120px\",\n        },\n      ],\n      query: {\n        limit: 10,\n        offset: 0,\n        order: Order.ASC,\n        current_page: 1,\n        sort_column: \"id\",\n        sort_direction: Order.ASC,\n        search: \"\",\n      },\n      showModal: false,\n\n      formData: {\n        name: \"\",\n        description: null,\n        priority: \"low\",\n        completed: false,\n        expires_at: null,\n      },\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      // store.isShowMainLoader = true;\n      try {\n        console.log(\"seses\");\n        const taskRepository = new TaskRepositoryImpl();\n        const listTaskUseCase = new ListTaskUseCase(taskRepository);\n        const data = await listTaskUseCase.execute(this.query);\n        console.log(data.data);\n        this.rows = data.data.data;\n        this.totalItems = data.data.total;\n      } catch (error) {\n        console.error(\"Error fetching categories\", error);\n      } finally {\n        // store.isShowMainLoader = false;\n      }\n    },\n    onModalShown() {\n      // Aquí ya puedes acceder al ref porque el componente TaskForm se ha creado\n      this.$refs.taskForm.formData = {\n        name: \"\",\n        description: null,\n        priority: \"low\",\n        completed: false,\n        expires_at: null,\n      };\n    },\n    editTask(task) {\n      console.log(task);\n      console.log(\"Editando tarea:\", JSON.parse(JSON.stringify(task)));\n      this.showModal = true;\n\n      // Pasar los datos al formulario y abrir el modal\n      this.$nextTick(() => {\n        if (this.$refs.taskForm) {\n          this.$refs.taskForm.formData = JSON.parse(JSON.stringify(task));\n        } else {\n          console.warn(\"No se encontró taskForm\");\n        }\n      });\n    },\n    openModal() {\n      this.showModal = true;\n    },\n    handleSubmit(bvModalEvent) {\n      bvModalEvent.preventDefault();\n      if (this.$refs.taskForm) {\n        this.$refs.taskForm.$el.dispatchEvent(new Event(\"submit\"));\n      }\n    },\n    async deleteTask(id) {\n      // this.boxOne = \"\";\n      this.$bvModal\n        .msgBoxConfirm(\"¿Estás seguro de eliminar esta tarea?\")\n        .then(async (value) => {\n          const taskRepository = new TaskRepositoryImpl();\n          const deleteTaskUseCase = new DeleteTaskUseCase(taskRepository);\n          await deleteTaskUseCase.execute(id);\n        })\n        .catch((err) => {\n          // An error occurred\n        })\n        .finally(() => {\n          this.fetchData(); // Recargar tabla\n        });\n    },\n\n    handleTaskUpdated(updatedTask) {\n      this.fetchData();\n      this.showModal = false;\n    },\n  },\n};\n</script>\n<style>\n.el-table.table-dark {\n  background-color: #172b4d;\n  color: #f8f9fe;\n}\n\n.el-table.table-dark th,\n.el-table.table-dark tr {\n  background-color: #172b4d;\n}\n\n.el-table.table-dark td,\n.el-table.table-dark th.is-leaf {\n  border-bottom: none;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}