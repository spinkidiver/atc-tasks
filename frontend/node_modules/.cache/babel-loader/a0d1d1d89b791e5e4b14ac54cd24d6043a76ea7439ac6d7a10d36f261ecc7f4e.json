{"ast":null,"code":"import { Form, Field, ErrorMessage } from \"vee-validate\";\nimport * as yup from \"yup\";\nimport { TaskRepositoryImpl } from \"@/app/task/infrastructure/repositories/TaskRepositoryImpl\";\nimport { StoreTaskUseCase, UpdateTaskUseCase } from \"@/app/task/usecases\";\nexport default {\n  name: \"TaskForm\",\n  components: {\n    Form,\n    Field\n    // ErrorMessage,\n  },\n  props: {\n    initialData: {\n      type: Object,\n      default: () => ({\n        name: \"\",\n        description: null,\n        status: \"low\",\n        completed: false,\n        expires_at: null,\n        id: null\n      })\n    }\n  },\n  data() {\n    return {\n      formData: {\n        ...this.initialData\n      },\n      taskSchema: yup.object().shape({\n        name: yup.string().required(\"El nombre es obligatorio\"),\n        description: yup.string().nullable(),\n        status: yup.string().oneOf([\"low\", \"medium\", \"high\"]).default(\"low\"),\n        completed: yup.boolean().default(false),\n        expires_at: yup.date().nullable()\n      })\n    };\n  },\n  watch: {\n    initialData: {\n      deep: true,\n      handler(newVal) {\n        this.formData = {\n          ...newVal\n        };\n      }\n    }\n  },\n  methods: {\n    async onSubmit(values) {\n      try {\n        const taskRepository = new TaskRepositoryImpl();\n        if (this.formData.id) {\n          const updateTaskUseCase = new UpdateTaskUseCase(taskRepository);\n          const response = await updateTaskUseCase.execute(values);\n          this.$emit(\"task-updated\", response);\n        } else {\n          const storeTaskUseCase = new StoreTaskUseCase(taskRepository);\n          const response = await storeTaskUseCase.execute(values);\n          this.$emit(\"task-added\", response);\n        }\n\n        // Reiniciar formulario si todo fue exitoso\n        this.formData = {\n          name: \"\",\n          description: null,\n          status: \"low\",\n          completed: false,\n          expires_at: null,\n          id: null\n        };\n      } catch (err) {\n        console.error(\"Error al guardar la tarea:\", err);\n      }\n    }\n  }\n};","map":{"version":3,"names":["Form","Field","ErrorMessage","yup","TaskRepositoryImpl","StoreTaskUseCase","UpdateTaskUseCase","name","components","props","initialData","type","Object","default","description","status","completed","expires_at","id","data","formData","taskSchema","object","shape","string","required","nullable","oneOf","boolean","date","watch","deep","handler","newVal","methods","onSubmit","values","taskRepository","updateTaskUseCase","response","execute","$emit","storeTaskUseCase","err","console","error"],"sources":["src/app/task/interfaces/presentation/components/TaskForm.vue"],"sourcesContent":["<template>\n  <Form @submit=\"onSubmit\" :validation-schema=\"taskSchema\">\n    <!-- Nombre -->\n    <b-form-group label=\"Nombre:\" label-for=\"name-input\">\n      <Field\n        name=\"name\"\n        v-model=\"formData.name\"\n        as=\"input\"\n        type=\"text\"\n        class=\"form-control\"\n        :class=\"{ 'is-invalid': errors.name }\"\n        placeholder=\"Nombre de la tarea\"\n      />\n      <div v-if=\"errors.name\" class=\"invalid-feedback\">{{ errors.name }}</div>\n    </b-form-group>\n\n    <!-- Descripción -->\n    <b-form-group label=\"Descripción:\" label-for=\"description-textarea\">\n      <b-form-textarea\n        id=\"description-textarea\"\n        v-model=\"formData.description\"\n        rows=\"3\"\n      ></b-form-textarea>\n    </b-form-group>\n\n    <!-- Estado -->\n    <b-form-group label=\"Estado:\" label-for=\"status-select\">\n      <b-form-select\n        id=\"status-select\"\n        v-model=\"formData.status\"\n        :options=\"['low', 'medium', 'high']\"\n      ></b-form-select>\n    </b-form-group>\n\n    <!-- Completado -->\n    <b-form-group label=\"¿Completada?\" label-cols-sm=\"4\" label-align-sm=\"right\">\n      <b-form-checkbox\n        v-model=\"formData.completed\"\n        switch\n        size=\"lg\"\n      ></b-form-checkbox>\n    </b-form-group>\n\n    <!-- Fecha de expiración -->\n    <b-form-group label=\"Fecha de Expiración:\" label-for=\"expires-at-input\">\n      <b-form-input\n        id=\"expires-at-input\"\n        type=\"datetime-local\"\n        v-model=\"formData.expires_at\"\n      ></b-form-input>\n    </b-form-group>\n\n    <!-- Botón submit -->\n    <b-button type=\"submit\" variant=\"primary\">Guardar</b-button>\n  </Form>\n</template>\n\n<script>\nimport { Form, Field, ErrorMessage } from \"vee-validate\";\nimport * as yup from \"yup\";\n\nimport { TaskRepositoryImpl } from \"@/app/task/infrastructure/repositories/TaskRepositoryImpl\";\nimport { StoreTaskUseCase, UpdateTaskUseCase } from \"@/app/task/usecases\";\n\nexport default {\n  name: \"TaskForm\",\n  components: {\n    Form,\n    Field,\n    // ErrorMessage,\n  },\n  props: {\n    initialData: {\n      type: Object,\n      default: () => ({\n        name: \"\",\n        description: null,\n        status: \"low\",\n        completed: false,\n        expires_at: null,\n        id: null,\n      }),\n    },\n  },\n  data() {\n    return {\n      formData: { ...this.initialData },\n      taskSchema: yup.object().shape({\n        name: yup.string().required(\"El nombre es obligatorio\"),\n        description: yup.string().nullable(),\n        status: yup.string().oneOf([\"low\", \"medium\", \"high\"]).default(\"low\"),\n        completed: yup.boolean().default(false),\n        expires_at: yup.date().nullable(),\n      }),\n    };\n  },\n  watch: {\n    initialData: {\n      deep: true,\n      handler(newVal) {\n        this.formData = { ...newVal };\n      },\n    },\n  },\n  methods: {\n    async onSubmit(values) {\n      try {\n        const taskRepository = new TaskRepositoryImpl();\n\n        if (this.formData.id) {\n          const updateTaskUseCase = new UpdateTaskUseCase(taskRepository);\n          const response = await updateTaskUseCase.execute(values);\n          this.$emit(\"task-updated\", response);\n        } else {\n          const storeTaskUseCase = new StoreTaskUseCase(taskRepository);\n          const response = await storeTaskUseCase.execute(values);\n          this.$emit(\"task-added\", response);\n        }\n\n        // Reiniciar formulario si todo fue exitoso\n        this.formData = {\n          name: \"\",\n          description: null,\n          status: \"low\",\n          completed: false,\n          expires_at: null,\n          id: null,\n        };\n      } catch (err) {\n        console.error(\"Error al guardar la tarea:\", err);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AA0DA,SAAAA,IAAA,EAAAC,KAAA,EAAAC,YAAA;AACA,YAAAC,GAAA;AAEA,SAAAC,kBAAA;AACA,SAAAC,gBAAA,EAAAC,iBAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAR,IAAA;IACAC;IACA;EACA;EACAQ,KAAA;IACAC,WAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,EAAAA,CAAA;QACAN,IAAA;QACAO,WAAA;QACAC,MAAA;QACAC,SAAA;QACAC,UAAA;QACAC,EAAA;MACA;IACA;EACA;EACAC,KAAA;IACA;MACAC,QAAA;QAAA,QAAAV;MAAA;MACAW,UAAA,EAAAlB,GAAA,CAAAmB,MAAA,GAAAC,KAAA;QACAhB,IAAA,EAAAJ,GAAA,CAAAqB,MAAA,GAAAC,QAAA;QACAX,WAAA,EAAAX,GAAA,CAAAqB,MAAA,GAAAE,QAAA;QACAX,MAAA,EAAAZ,GAAA,CAAAqB,MAAA,GAAAG,KAAA,4BAAAd,OAAA;QACAG,SAAA,EAAAb,GAAA,CAAAyB,OAAA,GAAAf,OAAA;QACAI,UAAA,EAAAd,GAAA,CAAA0B,IAAA,GAAAH,QAAA;MACA;IACA;EACA;EACAI,KAAA;IACApB,WAAA;MACAqB,IAAA;MACAC,QAAAC,MAAA;QACA,KAAAb,QAAA;UAAA,GAAAa;QAAA;MACA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,SAAAC,MAAA;MACA;QACA,MAAAC,cAAA,OAAAjC,kBAAA;QAEA,SAAAgB,QAAA,CAAAF,EAAA;UACA,MAAAoB,iBAAA,OAAAhC,iBAAA,CAAA+B,cAAA;UACA,MAAAE,QAAA,SAAAD,iBAAA,CAAAE,OAAA,CAAAJ,MAAA;UACA,KAAAK,KAAA,iBAAAF,QAAA;QACA;UACA,MAAAG,gBAAA,OAAArC,gBAAA,CAAAgC,cAAA;UACA,MAAAE,QAAA,SAAAG,gBAAA,CAAAF,OAAA,CAAAJ,MAAA;UACA,KAAAK,KAAA,eAAAF,QAAA;QACA;;QAEA;QACA,KAAAnB,QAAA;UACAb,IAAA;UACAO,WAAA;UACAC,MAAA;UACAC,SAAA;UACAC,UAAA;UACAC,EAAA;QACA;MACA,SAAAyB,GAAA;QACAC,OAAA,CAAAC,KAAA,+BAAAF,GAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}