{"ast":null,"code":"import { mapGetters } from \"vuex\";\nimport Modal from \"@/components/Modal\";\nimport { Order } from \"@/app/global/requests/dtos/TableRequest.ts\";\nimport { CommentRepositoryImpl } from \"@/app/comment/infrastructure/repositories/CommentRepositoryImpl\";\nimport { ListCommentUseCase, StoreCommentUseCase } from \"@/app/comment/usecases\";\nimport Comment from \"@/app/comment/domain/entities/Comment\";\nimport { Dropdown, DropdownItem, DropdownMenu, Table, TableColumn } from \"element-ui\";\nexport default {\n  components: {\n    [Dropdown.name]: Dropdown,\n    [DropdownItem.name]: DropdownItem,\n    [DropdownMenu.name]: DropdownMenu,\n    [Table.name]: Table,\n    [TableColumn.name]: TableColumn,\n    [Modal.name]: Modal\n  },\n  mounted() {\n    this.fetchData();\n  },\n  computed: {\n    ...mapGetters([\"selectedTask\"])\n  },\n  data() {\n    return {\n      newComment: \"\",\n      query: {\n        limit: 5,\n        offset: 0,\n        order: Order.ASC,\n        current_page: 1,\n        sort_column: \"id\",\n        sort_direction: Order.ASC,\n        search: \"\"\n      },\n      showModal: false,\n      formData: {\n        name: \"\",\n        description: null,\n        priority: \"low\",\n        completed: false,\n        expires_at: null\n      },\n      task: {},\n      comments: []\n    };\n  },\n  methods: {\n    async fetchData() {\n      // store.isShowMainLoader = true;\n      try {\n        this.query.task_id = this.selectedTask.id;\n        const commentRepository = new CommentRepositoryImpl();\n        const listCommentUseCase = new ListCommentUseCase(commentRepository);\n        const {\n          data\n        } = await listCommentUseCase.execute(this.query);\n        console.log(data.data);\n        this.comments = data.data;\n        this.query.total = data.total;\n      } catch (error) {\n        console.error(\"Error fetching comment\", error);\n      } finally {\n        // store.isShowMainLoader = false;\n      }\n    },\n    async addComment() {\n      if (!this.newComment.trim()) return;\n      try {\n        const commentRepository = new CommentRepositoryImpl();\n        const storeCommentUseCase = new StoreCommentUseCase(commentRepository);\n        const comment = new Comment({\n          task_id: this.selectedTask.id,\n          content: this.newComment.trim()\n        });\n        const data = await storeCommentUseCase.execute(comment);\n        if (!data.error) this.fetchData();\n        this.newComment = \"\";\n      } catch (error) {\n        console.error(\"Error agregando comentario\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","Modal","Order","CommentRepositoryImpl","ListCommentUseCase","StoreCommentUseCase","Comment","Dropdown","DropdownItem","DropdownMenu","Table","TableColumn","components","name","mounted","fetchData","computed","data","newComment","query","limit","offset","order","ASC","current_page","sort_column","sort_direction","search","showModal","formData","description","priority","completed","expires_at","task","comments","methods","task_id","selectedTask","id","commentRepository","listCommentUseCase","execute","console","log","total","error","addComment","trim","storeCommentUseCase","comment","content"],"sources":["src/app/task/interfaces/presentation/views/TaskEditView.vue"],"sourcesContent":["<template>\n  <div>\n    <base-header class=\"pb-6 pb-8 pt-5 pt-md-8 bg-gradient-success\">\n      <b-row>\n        <b-col md=\"12\">\n          <b-card class=\"shadow-sm rounded-3\">\n            <b-card-body>\n              Tarea:\n              <h4 class=\"text-left mb-4\">\n                {{ selectedTask.name }}\n              </h4>\n            </b-card-body>\n          </b-card>\n        </b-col>\n      </b-row>\n    </base-header>\n    <b-container fluid class=\"mt-7\">\n      <b-row>\n        <b-col>\n          <b-card>\n            <b-card-header\n              class=\"d-flex justify-content-between align-items-center\"\n            >\n              <!-- Input para nuevo comentario -->\n              <b-input-group size=\"m\">\n                <b-form-input\n                  v-model=\"newComment\"\n                  placeholder=\"Escribe un comentario...\"\n                ></b-form-input>\n                <b-input-group-append>\n                  <b-button variant=\"success\" @click=\"addComment\"\n                    >Agregar</b-button\n                  >\n                </b-input-group-append>\n              </b-input-group>\n            </b-card-header>\n\n            <b-card-body>\n              <!-- Lista de Comentarios -->\n              <div v-if=\"comments && comments.length\">\n                <b-list-group flush>\n                  <b-list-group-item\n                    v-for=\"comment in comments\"\n                    :key=\"comment.id\"\n                  >\n                    üó®Ô∏è {{ comment.content }}\n                  </b-list-group-item>\n                </b-list-group>\n\n                <!-- Paginaci√≥n estilo Laravel -->\n                <b-pagination\n                  v-model=\"query.current_page\"\n                  :per-page=\"query.limit\"\n                  :total-rows=\"query.total\"\n                  align=\"right\"\n                  size=\"sm\"\n                  class=\"mt-3\"\n                  @input=\"fetchData\"\n                ></b-pagination>\n              </div>\n              <div v-else class=\"text-muted\">No hay comentarios a√∫n.</div>\n            </b-card-body>\n          </b-card>\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport Modal from \"@/components/Modal\";\nimport { Order } from \"@/app/global/requests/dtos/TableRequest.ts\";\nimport { CommentRepositoryImpl } from \"@/app/comment/infrastructure/repositories/CommentRepositoryImpl\";\nimport {\n  ListCommentUseCase,\n  StoreCommentUseCase,\n} from \"@/app/comment/usecases\";\nimport Comment from \"@/app/comment/domain/entities/Comment\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  Table,\n  TableColumn,\n} from \"element-ui\";\n\nexport default {\n  components: {\n    [Dropdown.name]: Dropdown,\n    [DropdownItem.name]: DropdownItem,\n    [DropdownMenu.name]: DropdownMenu,\n    [Table.name]: Table,\n    [TableColumn.name]: TableColumn,\n\n    [Modal.name]: Modal,\n  },\n  mounted() {\n    this.fetchData();\n  },\n  computed: {\n    ...mapGetters([\"selectedTask\"]),\n  },\n  data() {\n    return {\n      newComment: \"\",\n      query: {\n        limit: 5,\n        offset: 0,\n        order: Order.ASC,\n        current_page: 1,\n        sort_column: \"id\",\n        sort_direction: Order.ASC,\n        search: \"\",\n      },\n      showModal: false,\n\n      formData: {\n        name: \"\",\n        description: null,\n        priority: \"low\",\n        completed: false,\n        expires_at: null,\n      },\n      task: {},\n\n      comments: [],\n    };\n  },\n  methods: {\n    async fetchData() {\n      // store.isShowMainLoader = true;\n      try {\n        this.query.task_id = this.selectedTask.id;\n\n        const commentRepository = new CommentRepositoryImpl();\n        const listCommentUseCase = new ListCommentUseCase(commentRepository);\n        const { data } = await listCommentUseCase.execute(this.query);\n        console.log(data.data);\n        this.comments = data.data;\n        this.query.total = data.total;\n      } catch (error) {\n        console.error(\"Error fetching comment\", error);\n      } finally {\n        // store.isShowMainLoader = false;\n      }\n    },\n    async addComment() {\n      if (!this.newComment.trim()) return;\n\n      try {\n        const commentRepository = new CommentRepositoryImpl();\n        const storeCommentUseCase = new StoreCommentUseCase(commentRepository);\n        const comment = new Comment({\n          task_id: this.selectedTask.id,\n          content: this.newComment.trim(),\n        });\n\n        const data = await storeCommentUseCase.execute(comment);\n        if (!data.error) this.fetchData();\n        this.newComment = \"\";\n      } catch (error) {\n        console.error(\"Error agregando comentario\", error);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AAsEA,SAAAA,UAAA;AACA,OAAAC,KAAA;AACA,SAAAC,KAAA;AACA,SAAAC,qBAAA;AACA,SACAC,kBAAA,EACAC,mBAAA,QACA;AACA,OAAAC,OAAA;AACA,SACAC,QAAA,EACAC,YAAA,EACAC,YAAA,EACAC,KAAA,EACAC,WAAA,QACA;AAEA;EACAC,UAAA;IACA,CAAAL,QAAA,CAAAM,IAAA,GAAAN,QAAA;IACA,CAAAC,YAAA,CAAAK,IAAA,GAAAL,YAAA;IACA,CAAAC,YAAA,CAAAI,IAAA,GAAAJ,YAAA;IACA,CAAAC,KAAA,CAAAG,IAAA,GAAAH,KAAA;IACA,CAAAC,WAAA,CAAAE,IAAA,GAAAF,WAAA;IAEA,CAAAV,KAAA,CAAAY,IAAA,GAAAZ;EACA;EACAa,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,QAAA;IACA,GAAAhB,UAAA;EACA;EACAiB,KAAA;IACA;MACAC,UAAA;MACAC,KAAA;QACAC,KAAA;QACAC,MAAA;QACAC,KAAA,EAAApB,KAAA,CAAAqB,GAAA;QACAC,YAAA;QACAC,WAAA;QACAC,cAAA,EAAAxB,KAAA,CAAAqB,GAAA;QACAI,MAAA;MACA;MACAC,SAAA;MAEAC,QAAA;QACAhB,IAAA;QACAiB,WAAA;QACAC,QAAA;QACAC,SAAA;QACAC,UAAA;MACA;MACAC,IAAA;MAEAC,QAAA;IACA;EACA;EACAC,OAAA;IACA,MAAArB,UAAA;MACA;MACA;QACA,KAAAI,KAAA,CAAAkB,OAAA,QAAAC,YAAA,CAAAC,EAAA;QAEA,MAAAC,iBAAA,OAAArC,qBAAA;QACA,MAAAsC,kBAAA,OAAArC,kBAAA,CAAAoC,iBAAA;QACA;UAAAvB;QAAA,UAAAwB,kBAAA,CAAAC,OAAA,MAAAvB,KAAA;QACAwB,OAAA,CAAAC,GAAA,CAAA3B,IAAA,CAAAA,IAAA;QACA,KAAAkB,QAAA,GAAAlB,IAAA,CAAAA,IAAA;QACA,KAAAE,KAAA,CAAA0B,KAAA,GAAA5B,IAAA,CAAA4B,KAAA;MACA,SAAAC,KAAA;QACAH,OAAA,CAAAG,KAAA,2BAAAA,KAAA;MACA;QACA;MAAA;IAEA;IACA,MAAAC,WAAA;MACA,UAAA7B,UAAA,CAAA8B,IAAA;MAEA;QACA,MAAAR,iBAAA,OAAArC,qBAAA;QACA,MAAA8C,mBAAA,OAAA5C,mBAAA,CAAAmC,iBAAA;QACA,MAAAU,OAAA,OAAA5C,OAAA;UACA+B,OAAA,OAAAC,YAAA,CAAAC,EAAA;UACAY,OAAA,OAAAjC,UAAA,CAAA8B,IAAA;QACA;QAEA,MAAA/B,IAAA,SAAAgC,mBAAA,CAAAP,OAAA,CAAAQ,OAAA;QACA,KAAAjC,IAAA,CAAA6B,KAAA,OAAA/B,SAAA;QACA,KAAAG,UAAA;MACA,SAAA4B,KAAA;QACAH,OAAA,CAAAG,KAAA,+BAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}