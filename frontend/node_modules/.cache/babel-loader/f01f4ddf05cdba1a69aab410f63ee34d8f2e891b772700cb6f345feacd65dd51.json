{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nexport default {\n  name: 'notification',\n  components: {\n    contentRender: {\n      props: ['component'],\n      render: function (createElement) {\n        return createElement(this.component);\n      }\n    }\n  },\n  props: {\n    message: String,\n    title: {\n      type: String,\n      description: 'Notification title'\n    },\n    icon: {\n      type: String,\n      description: 'Notification icon'\n    },\n    verticalAlign: {\n      type: String,\n      default: 'top',\n      validator: value => {\n        let acceptedValues = ['top', 'bottom'];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n      description: 'Vertical alignment of notification (top|bottom)'\n    },\n    horizontalAlign: {\n      type: String,\n      default: 'right',\n      validator: value => {\n        let acceptedValues = ['left', 'center', 'right'];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n      description: 'Horizontal alignment of notification (left|center|right)'\n    },\n    type: {\n      type: String,\n      default: 'info',\n      validator: value => {\n        let acceptedValues = ['default', 'info', 'primary', 'danger', 'warning', 'success'];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n      description: 'Notification type of notification (default|info|primary|danger|warning|success)'\n    },\n    timeout: {\n      type: Number,\n      default: 5000,\n      validator: value => {\n        return value >= 0;\n      },\n      description: 'Notification timeout (closes after X milliseconds). Default is 5000 (5s)'\n    },\n    timestamp: {\n      type: Date,\n      default: () => new Date(),\n      description: 'Notification timestamp (used internally to handle notification removal correctly)'\n    },\n    component: {\n      type: [Object, Function],\n      description: 'Custom content component. Cane be a `.vue` component or render function'\n    },\n    showClose: {\n      type: Boolean,\n      default: true,\n      description: 'Whether to show close button'\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true,\n      description: 'Whether to close notification when clicking it\\' body'\n    },\n    clickHandler: {\n      type: Function,\n      description: 'Custom notification click handler'\n    }\n  },\n  data() {\n    return {\n      elmHeight: 0\n    };\n  },\n  computed: {\n    hasIcon() {\n      return this.icon && this.icon.length > 0;\n    },\n    alertType() {\n      return `alert-${this.type}`;\n    },\n    customPosition() {\n      let initialMargin = 20;\n      let alertHeight = this.elmHeight + 10;\n      let sameAlertsCount = this.$notifications.state.filter(alert => {\n        return alert.horizontalAlign === this.horizontalAlign && alert.verticalAlign === this.verticalAlign && alert.timestamp <= this.timestamp;\n      }).length;\n      if (this.$notifications.settings.overlap) {\n        sameAlertsCount = 1;\n      }\n      let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin;\n      let styles = {};\n      if (this.verticalAlign === 'top') {\n        styles.top = `${pixels}px`;\n      } else {\n        styles.bottom = `${pixels}px`;\n      }\n      return styles;\n    }\n  },\n  methods: {\n    close() {\n      this.$emit('close', this.timestamp);\n    },\n    tryClose(evt) {\n      if (this.clickHandler) {\n        this.clickHandler(evt, this);\n      }\n      if (this.closeOnClick) {\n        this.close();\n      }\n    }\n  },\n  mounted() {\n    this.elmHeight = this.$el.clientHeight;\n    if (this.timeout) {\n      setTimeout(this.close, this.timeout);\n    }\n  }\n};","map":{"version":3,"names":["name","components","contentRender","props","render","createElement","component","message","String","title","type","description","icon","verticalAlign","default","validator","value","acceptedValues","indexOf","horizontalAlign","timeout","Number","timestamp","Date","Object","Function","showClose","Boolean","closeOnClick","clickHandler","data","elmHeight","computed","hasIcon","length","alertType","customPosition","initialMargin","alertHeight","sameAlertsCount","$notifications","state","filter","alert","settings","overlap","pixels","styles","top","bottom","methods","close","$emit","tryClose","evt","mounted","$el","clientHeight","setTimeout"],"sources":["src/components/NotificationPlugin/Notification.vue"],"sourcesContent":["<template>\n  <div\n    @click=\"tryClose\"\n    data-notify=\"container\"\n    class=\"alert alert-notify alert-dismissible\"\n    :class=\"[\n      { 'alert-with-icon': icon },\n      verticalAlign,\n      horizontalAlign,\n      alertType\n    ]\"\n    role=\"alert\"\n    :style=\"customPosition\"\n    data-notify-position=\"top-center\"\n  >\n    <template v-if=\"icon || $slots.icon\">\n      <slot name=\"icon\">\n            <span class=\"alert-icon\" data-notify=\"icon\">\n              <i :class=\"icon\"></i>\n            </span>\n      </slot>\n    </template>\n\n    <span class=\"alert-text\">\n\n      <span v-if=\"title\" class=\"title\">\n        <b>{{ title }}<br/></b>\n      </span>\n      <span v-if=\"message\" v-html=\"message\"></span>\n      <content-render\n        v-if=\"!message && component\"\n        :component=\"component\"\n      ></content-render>\n    </span>\n\n    <slot name=\"dismiss-icon\">\n      <button type=\"button\"\n              class=\"close\"\n              data-dismiss=\"alert\"\n              aria-label=\"Close\"\n              @click=\"close\">\n        <span aria-hidden=\"true\">Ã—</span>\n      </button>\n    </slot>\n  </div>\n</template>\n<script>\n  export default {\n    name: 'notification',\n    components: {\n      contentRender: {\n        props: ['component'],\n        render: function (createElement) {\n          return createElement(this.component)\n        }\n      }\n    },\n    props: {\n      message: String,\n      title: {\n        type: String,\n        description: 'Notification title'\n      },\n      icon: {\n        type: String,\n        description: 'Notification icon'\n      },\n      verticalAlign: {\n        type: String,\n        default: 'top',\n        validator: value => {\n          let acceptedValues = ['top', 'bottom'];\n          return acceptedValues.indexOf(value) !== -1;\n        },\n        description: 'Vertical alignment of notification (top|bottom)'\n      },\n      horizontalAlign: {\n        type: String,\n        default: 'right',\n        validator: value => {\n          let acceptedValues = ['left', 'center', 'right'];\n          return acceptedValues.indexOf(value) !== -1;\n        },\n        description: 'Horizontal alignment of notification (left|center|right)'\n      },\n      type: {\n        type: String,\n        default: 'info',\n        validator: value => {\n          let acceptedValues = [\n            'default',\n            'info',\n            'primary',\n            'danger',\n            'warning',\n            'success'\n          ];\n          return acceptedValues.indexOf(value) !== -1;\n        },\n        description: 'Notification type of notification (default|info|primary|danger|warning|success)'\n      },\n      timeout: {\n        type: Number,\n        default: 5000,\n        validator: value => {\n          return value >= 0;\n        },\n        description: 'Notification timeout (closes after X milliseconds). Default is 5000 (5s)'\n      },\n      timestamp: {\n        type: Date,\n        default: () => new Date(),\n        description: 'Notification timestamp (used internally to handle notification removal correctly)'\n      },\n      component: {\n        type: [Object, Function],\n        description: 'Custom content component. Cane be a `.vue` component or render function'\n      },\n      showClose: {\n        type: Boolean,\n        default: true,\n        description: 'Whether to show close button'\n      },\n      closeOnClick: {\n        type: Boolean,\n        default: true,\n        description: 'Whether to close notification when clicking it\\' body'\n      },\n      clickHandler: {\n        type: Function,\n        description: 'Custom notification click handler'\n      }\n    },\n    data() {\n      return {\n        elmHeight: 0\n      };\n    },\n    computed: {\n      hasIcon() {\n        return this.icon && this.icon.length > 0;\n      },\n      alertType() {\n        return `alert-${this.type}`;\n      },\n      customPosition() {\n        let initialMargin = 20;\n        let alertHeight = this.elmHeight + 10;\n        let sameAlertsCount = this.$notifications.state.filter(alert => {\n          return (\n            alert.horizontalAlign === this.horizontalAlign &&\n            alert.verticalAlign === this.verticalAlign &&\n            alert.timestamp <= this.timestamp\n          );\n        }).length;\n        if (this.$notifications.settings.overlap) {\n          sameAlertsCount = 1;\n        }\n        let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin;\n        let styles = {};\n        if (this.verticalAlign === 'top') {\n          styles.top = `${pixels}px`;\n        } else {\n          styles.bottom = `${pixels}px`;\n        }\n        return styles;\n      }\n    },\n    methods: {\n      close() {\n        this.$emit('close', this.timestamp);\n      },\n      tryClose(evt) {\n        if (this.clickHandler) {\n          this.clickHandler(evt, this);\n        }\n        if (this.closeOnClick) {\n          this.close();\n        }\n      }\n    },\n    mounted() {\n      this.elmHeight = this.$el.clientHeight;\n      if (this.timeout) {\n        setTimeout(this.close, this.timeout);\n      }\n    }\n  };\n</script>\n<style lang=\"scss\">\n  .notifications .alert {\n    position: fixed;\n    z-index: 10000;\n\n    &[data-notify='container'] {\n      max-width: 500px;\n    }\n\n    &.center {\n      margin: 0 auto;\n    }\n    &.left {\n      left: 20px;\n    }\n    &.right {\n      right: 20px;\n    }\n  }\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}