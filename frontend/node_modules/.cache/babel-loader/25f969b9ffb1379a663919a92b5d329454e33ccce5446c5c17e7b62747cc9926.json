{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { TaskRepositoryImpl } from \"@/app/task/infrastructure/repositories/TaskRepositoryImpl\";\nimport { StoreTaskUseCase, UpdateTaskUseCase } from \"@/app/task/usecases\";\nimport * as yup from \"yup\";\nimport { Form, Field, ErrorMessage } from \"vee-validate\";\nimport Task from \"@/app/task/domain/entities/Task\";\nimport { required } from \"vee-validate/dist/rules\";\nexport default {\n  name: \"TaskForm\",\n  props: {\n    initialData: {\n      type: Object,\n      default: () => ({\n        name: \"\",\n        description: null,\n        status: \"low\",\n        completed: false,\n        expires_at: null,\n        id: null\n      })\n    }\n  },\n  data() {\n    return {\n      PriorityOptions: [{\n        value: null,\n        text: \"Selecciona una opcion\"\n      }, {\n        value: \"a\",\n        text: \"Baja\"\n      }, {\n        value: \"b\",\n        text: \"Media\"\n      }, {\n        value: {\n          C: \"3PO\"\n        },\n        text: \"Alta\"\n      }],\n      formData: {\n        ...this.initialData\n      },\n      loading: false,\n      error: null,\n      backendErrors: {\n        name: \"\",\n        lastname: \"\",\n        identification: \"\",\n        email: \"\",\n        password: \"\"\n      }\n    };\n  },\n  watch: {\n    initialData: {\n      deep: true,\n      handler(newVal) {\n        this.formData = {\n          ...newVal\n        };\n      }\n    }\n  },\n  methods: {\n    async onSubmit() {\n      try {\n        const taskRepository = new TaskRepositoryImpl();\n        let response;\n        if (this.formData.id) {\n          // Actualizar tarea existente\n          const updateTaskUseCase = new UpdateTaskUseCase(taskRepository);\n          response = await updateTaskUseCase.execute(this.formData);\n          // this.$emit(\"task-updated\", response);\n        } else {\n          // Crear nueva tarea\n          const storeTaskUseCase = new StoreTaskUseCase(taskRepository);\n          response = await storeTaskUseCase.execute(this.formData);\n          // this.$emit(\"task-added\", response);\n        }\n      } catch (error) {\n        if (error.response && error.response.data && error.response.data.errors) {\n          const errors = error.response.data.errors;\n          // Limpia errores anteriores\n          Object.keys(this.backendErrors).forEach(key => {\n            this.backendErrors[key] = \"\";\n          });\n          Object.entries(errors).forEach(([field, messages]) => {\n            if (Object.prototype.hasOwnProperty.call(this.backendErrors, field)) {\n              this.backendErrors[field] = messages.join(\", \");\n            }\n          });\n        }\n      }\n    }\n    // async onSubmit(values) {\n    //   try {\n    //     const taskData = new Task({\n    //       id: this.formData.id,\n    //       description: values.description,\n    //       active: values.active,\n    //     });\n\n    //     // Attempts to coerce values to the correct type\n    //     let parsedData = this.taskSchema.cast(taskData, {\n    //       stripUnknown: true,\n    //       assert: true,\n    //     });\n    //     const taskRepository = new TaskRepositoryImpl();\n    //     let response;\n\n    //     if (this.formData.id) {\n    //       // Actualizar tarea existente\n    //       const updateTaskUseCase = new UpdateTaskUseCase(taskRepository);\n    //       response = await updateTaskUseCase.execute(parsedData);\n    //       // this.$emit(\"task-updated\", response);\n    //     } else {\n    //       // Crear nueva tarea\n    //       const storeTaskUseCase = new StoreTaskUseCase(taskRepository);\n    //       response = await storeTaskUseCase.execute(parsedData);\n    //       // this.$emit(\"task-added\", response);\n    //     }\n\n    //     if (!response?.error) {\n    //       this.formData = {\n    //         name: \"\",\n    //         description: null,\n    //         status: \"low\",\n    //         completed: false,\n    //         expires_at: null,\n    //         id: null,\n    //       };\n    //     }\n    //   } catch (err) {\n    //     console.error(\"Error al validar/guardar la tarea:\", err);\n    //     this.error = err.errors ? err.errors.join(\", \") : \"Hubo un error.\";\n    //   }\n    // },\n  }\n};","map":{"version":3,"names":["TaskRepositoryImpl","StoreTaskUseCase","UpdateTaskUseCase","yup","Form","Field","ErrorMessage","Task","required","name","props","initialData","type","Object","default","description","status","completed","expires_at","id","data","PriorityOptions","value","text","C","formData","loading","error","backendErrors","lastname","identification","email","password","watch","deep","handler","newVal","methods","onSubmit","taskRepository","response","updateTaskUseCase","execute","storeTaskUseCase","errors","keys","forEach","key","entries","field","messages","prototype","hasOwnProperty","call","join"],"sources":["src/app/task/interfaces/presentation/components/TaskForm.vue"],"sourcesContent":["<template>\n  <validation-observer v-slot=\"{ handleSubmit }\" ref=\"formValidator\">\n    <b-form role=\"form\" @submit.prevent=\"handleSubmit(onSubmit)\">\n      <base-input\n        alternative\n        class=\"mb-3\"\n        name=\"Name\"\n        :rules=\"{ required: true }\"\n        placeholder=\"Name\"\n        v-model=\"formData.name\"\n      >\n      </base-input>\n\n      <base-input\n        alternative\n        class=\"mb-3\"\n        name=\"Description\"\n        :rules=\"{ max: 192 }\"\n        type=\"tex-area\"\n        placeholder=\"Description\"\n        v-model=\"formData.description\"\n      >\n      </base-input>\n\n      <base-input :rules=\"{ required: true }\" name=\"Priority\" Policy>\n        <b-form-select\n          v-model=\"formData.priority\"\n          :options=\"PriorityOptions\"\n        ></b-form-select>\n      </base-input>\n\n      <base-input :rules=\"{}\" name=\"Completed\" Policy>\n        <b-form-checkbox v-model=\"formData.completed\">\n          <span class=\"text-muted\">Completed </span>\n        </b-form-checkbox>\n      </base-input>\n\n      <div class=\"text-center\">\n        <base-button type=\"primary\" native-type=\"submit\" class=\"my-4\"\n          >Sign in</base-button\n        >\n      </div>\n    </b-form>\n  </validation-observer>\n</template>\n\n<script>\nimport { TaskRepositoryImpl } from \"@/app/task/infrastructure/repositories/TaskRepositoryImpl\";\nimport { StoreTaskUseCase, UpdateTaskUseCase } from \"@/app/task/usecases\";\nimport * as yup from \"yup\";\nimport { Form, Field, ErrorMessage } from \"vee-validate\";\nimport Task from \"@/app/task/domain/entities/Task\";\nimport { required } from \"vee-validate/dist/rules\";\n\nexport default {\n  name: \"TaskForm\",\n\n  props: {\n    initialData: {\n      type: Object,\n      default: () => ({\n        name: \"\",\n        description: null,\n        status: \"low\",\n        completed: false,\n        expires_at: null,\n        id: null,\n      }),\n    },\n  },\n\n  data() {\n    return {\n      PriorityOptions: [\n        { value: null, text: \"Selecciona una opcion\" },\n        { value: \"a\", text: \"Baja\" },\n        { value: \"b\", text: \"Media\" },\n        { value: { C: \"3PO\" }, text: \"Alta\" },\n      ],\n      formData: { ...this.initialData },\n      loading: false,\n      error: null,\n      backendErrors: {\n        name: \"\",\n        lastname: \"\",\n        identification: \"\",\n        email: \"\",\n        password: \"\",\n      },\n    };\n  },\n\n  watch: {\n    initialData: {\n      deep: true,\n      handler(newVal) {\n        this.formData = { ...newVal };\n      },\n    },\n  },\n\n  methods: {\n    async onSubmit() {\n      try {\n        const taskRepository = new TaskRepositoryImpl();\n        let response;\n        if (this.formData.id) {\n          // Actualizar tarea existente\n          const updateTaskUseCase = new UpdateTaskUseCase(taskRepository);\n          response = await updateTaskUseCase.execute(this.formData);\n          // this.$emit(\"task-updated\", response);\n        } else {\n          // Crear nueva tarea\n          const storeTaskUseCase = new StoreTaskUseCase(taskRepository);\n          response = await storeTaskUseCase.execute(this.formData);\n          // this.$emit(\"task-added\", response);\n        }\n      } catch (error) {\n        if (\n          error.response &&\n          error.response.data &&\n          error.response.data.errors\n        ) {\n          const errors = error.response.data.errors;\n          // Limpia errores anteriores\n          Object.keys(this.backendErrors).forEach((key) => {\n            this.backendErrors[key] = \"\";\n          });\n\n          Object.entries(errors).forEach(([field, messages]) => {\n            if (\n              Object.prototype.hasOwnProperty.call(this.backendErrors, field)\n            ) {\n              this.backendErrors[field] = messages.join(\", \");\n            }\n          });\n        }\n      }\n    },\n    // async onSubmit(values) {\n    //   try {\n    //     const taskData = new Task({\n    //       id: this.formData.id,\n    //       description: values.description,\n    //       active: values.active,\n    //     });\n\n    //     // Attempts to coerce values to the correct type\n    //     let parsedData = this.taskSchema.cast(taskData, {\n    //       stripUnknown: true,\n    //       assert: true,\n    //     });\n    //     const taskRepository = new TaskRepositoryImpl();\n    //     let response;\n\n    //     if (this.formData.id) {\n    //       // Actualizar tarea existente\n    //       const updateTaskUseCase = new UpdateTaskUseCase(taskRepository);\n    //       response = await updateTaskUseCase.execute(parsedData);\n    //       // this.$emit(\"task-updated\", response);\n    //     } else {\n    //       // Crear nueva tarea\n    //       const storeTaskUseCase = new StoreTaskUseCase(taskRepository);\n    //       response = await storeTaskUseCase.execute(parsedData);\n    //       // this.$emit(\"task-added\", response);\n    //     }\n\n    //     if (!response?.error) {\n    //       this.formData = {\n    //         name: \"\",\n    //         description: null,\n    //         status: \"low\",\n    //         completed: false,\n    //         expires_at: null,\n    //         id: null,\n    //       };\n    //     }\n    //   } catch (err) {\n    //     console.error(\"Error al validar/guardar la tarea:\", err);\n    //     this.error = err.errors ? err.errors.join(\", \") : \"Hubo un error.\";\n    //   }\n    // },\n  },\n};\n</script>\n"],"mappings":";;AA+CA,SAAAA,kBAAA;AACA,SAAAC,gBAAA,EAAAC,iBAAA;AACA,YAAAC,GAAA;AACA,SAAAC,IAAA,EAAAC,KAAA,EAAAC,YAAA;AACA,OAAAC,IAAA;AACA,SAAAC,QAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACAC,WAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,EAAAA,CAAA;QACAL,IAAA;QACAM,WAAA;QACAC,MAAA;QACAC,SAAA;QACAC,UAAA;QACAC,EAAA;MACA;IACA;EACA;EAEAC,KAAA;IACA;MACAC,eAAA,GACA;QAAAC,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;UAAAE,CAAA;QAAA;QAAAD,IAAA;MAAA,EACA;MACAE,QAAA;QAAA,QAAAd;MAAA;MACAe,OAAA;MACAC,KAAA;MACAC,aAAA;QACAnB,IAAA;QACAoB,QAAA;QACAC,cAAA;QACAC,KAAA;QACAC,QAAA;MACA;IACA;EACA;EAEAC,KAAA;IACAtB,WAAA;MACAuB,IAAA;MACAC,QAAAC,MAAA;QACA,KAAAX,QAAA;UAAA,GAAAW;QAAA;MACA;IACA;EACA;EAEAC,OAAA;IACA,MAAAC,SAAA;MACA;QACA,MAAAC,cAAA,OAAAvC,kBAAA;QACA,IAAAwC,QAAA;QACA,SAAAf,QAAA,CAAAN,EAAA;UACA;UACA,MAAAsB,iBAAA,OAAAvC,iBAAA,CAAAqC,cAAA;UACAC,QAAA,SAAAC,iBAAA,CAAAC,OAAA,MAAAjB,QAAA;UACA;QACA;UACA;UACA,MAAAkB,gBAAA,OAAA1C,gBAAA,CAAAsC,cAAA;UACAC,QAAA,SAAAG,gBAAA,CAAAD,OAAA,MAAAjB,QAAA;UACA;QACA;MACA,SAAAE,KAAA;QACA,IACAA,KAAA,CAAAa,QAAA,IACAb,KAAA,CAAAa,QAAA,CAAApB,IAAA,IACAO,KAAA,CAAAa,QAAA,CAAApB,IAAA,CAAAwB,MAAA,EACA;UACA,MAAAA,MAAA,GAAAjB,KAAA,CAAAa,QAAA,CAAApB,IAAA,CAAAwB,MAAA;UACA;UACA/B,MAAA,CAAAgC,IAAA,MAAAjB,aAAA,EAAAkB,OAAA,CAAAC,GAAA;YACA,KAAAnB,aAAA,CAAAmB,GAAA;UACA;UAEAlC,MAAA,CAAAmC,OAAA,CAAAJ,MAAA,EAAAE,OAAA,GAAAG,KAAA,EAAAC,QAAA;YACA,IACArC,MAAA,CAAAsC,SAAA,CAAAC,cAAA,CAAAC,IAAA,MAAAzB,aAAA,EAAAqB,KAAA,GACA;cACA,KAAArB,aAAA,CAAAqB,KAAA,IAAAC,QAAA,CAAAI,IAAA;YACA;UACA;QACA;MACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}