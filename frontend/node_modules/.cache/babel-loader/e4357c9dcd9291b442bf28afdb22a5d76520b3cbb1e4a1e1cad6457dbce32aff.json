{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { TaskRepositoryImpl } from \"@/app/task/infrastructure/repositories/TaskRepositoryImpl\";\nimport { StoreTaskUseCase, UpdateTaskUseCase } from \"@/app/task/usecases\";\nimport axios from \"axios\";\nexport default {\n  name: \"TaskForm\",\n  props: {\n    initialData: {\n      type: Object,\n      default: () => ({\n        name: \"\",\n        description: null,\n        priority: \"low\",\n        completed: false,\n        expires_at: null,\n        id: null\n      })\n    },\n    task: {\n      type: Object,\n      default: () => ({\n        name: \"\",\n        description: \"\",\n        priority: \"low\",\n        completed: false,\n        expires_at: null\n      })\n    }\n  },\n  data() {\n    return {\n      PriorityOptions: [{\n        value: null,\n        text: \"Selecciona una opcion\"\n      }, {\n        value: \"low\",\n        text: \"Baja\"\n      }, {\n        value: \"medium\",\n        text: \"Media\"\n      }, {\n        value: \"high\",\n        text: \"Alta\"\n      }],\n      formData: {\n        ...this.task\n      },\n      loading: false,\n      error: null,\n      backendErrors: {\n        name: \"\",\n        lastname: \"\",\n        identification: \"\",\n        email: \"\",\n        password: \"\"\n      }\n    };\n  },\n  watch: {\n    task: {\n      deep: true,\n      handler(newVal) {\n        console.log(newVal.value);\n        this.formData = {\n          ...newVal\n        };\n      }\n    }\n  },\n  methods: {\n    async onSubmit() {\n      try {\n        const taskRepository = new TaskRepositoryImpl();\n        let response;\n        if (this.formData.id) {\n          // Actualizar tarea existente\n          const updateTaskUseCase = new UpdateTaskUseCase(taskRepository);\n          response = await updateTaskUseCase.execute(this.formData);\n          // this.$emit(\"task-updated\", response);\n        } else {\n          // Crear nueva tarea\n          const storeTaskUseCase = new StoreTaskUseCase(taskRepository);\n          response = await storeTaskUseCase.execute(this.formData);\n          // this.$emit(\"task-added\", response);\n        }\n\n        // Limpiar formulario\n        this.formData = {\n          name: \"\",\n          description: null,\n          priority: \"low\",\n          completed: false,\n          expires_at: null\n        };\n        this.$emit(\"task-updated\", null);\n      } catch (error) {\n        if (error.response && error.response.data && error.response.data.errors) {\n          const errors = error.response.data.errors;\n          // Limpia errores anteriores\n          Object.keys(this.backendErrors).forEach(key => {\n            this.backendErrors[key] = \"\";\n          });\n          Object.entries(errors).forEach(([field, messages]) => {\n            if (Object.prototype.hasOwnProperty.call(this.backendErrors, field)) {\n              this.backendErrors[field] = messages.join(\", \");\n            }\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["TaskRepositoryImpl","StoreTaskUseCase","UpdateTaskUseCase","axios","name","props","initialData","type","Object","default","description","priority","completed","expires_at","id","task","data","PriorityOptions","value","text","formData","loading","error","backendErrors","lastname","identification","email","password","watch","deep","handler","newVal","console","log","methods","onSubmit","taskRepository","response","updateTaskUseCase","execute","storeTaskUseCase","$emit","errors","keys","forEach","key","entries","field","messages","prototype","hasOwnProperty","call","join"],"sources":["src/app/task/interfaces/presentation/components/TaskForm.vue"],"sourcesContent":["<template>\n  <validation-observer v-slot=\"{ handleSubmit }\" ref=\"formValidator\">\n    <b-form role=\"form\" @submit.prevent=\"handleSubmit(onSubmit)\">\n      <b-form-group label=\"Nombre\" label-class=\"form-control-label\">\n        <base-input\n          alternative\n          class=\"mb-3\"\n          name=\"Name\"\n          :rules=\"{ required: true }\"\n          placeholder=\"Name\"\n          v-model=\"formData.name\"\n        >\n        </base-input>\n      </b-form-group>\n\n      <div class=\"\">\n        <b-form-group label=\"Descripcion\" label-class=\"form-control-label\">\n          <!--  <label class=\"form-control-label\">About Me</label> -->\n          <b-form-textarea\n            v-model=\"formData.description\"\n            rows=\"4\"\n            value=\"\"\n            id=\"about-form-textaria\"\n            placeholder=\"Description\"\n          ></b-form-textarea>\n        </b-form-group>\n      </div>\n      <b-form-group label=\"Prioridad\" label-class=\"form-control-label\">\n        <base-input :rules=\"{ required: true }\" name=\"Priority\" Policy>\n          <b-form-select\n            v-model=\"formData.priority\"\n            :options=\"PriorityOptions\"\n          ></b-form-select>\n        </base-input>\n      </b-form-group>\n\n      <b-form-group label=\"Fecha exp.\" label-class=\"form-control-label\">\n        <base-input\n          type=\"date\"\n          alternative\n          class=\"mb-3\"\n          name=\"expires_at\"\n          :rules=\"{}\"\n          placeholder=\"expires_at\"\n          v-model=\"formData.expires_at\"\n        >\n        </base-input>\n      </b-form-group>\n\n      <b-form-group>\n        <base-input :rules=\"{}\" name=\"Completed\" Policy>\n          <b-form-checkbox v-model=\"formData.completed\">\n            <span class=\"text-muted\">Completado </span>\n          </b-form-checkbox>\n        </base-input>\n      </b-form-group>\n\n      <div class=\"text-right\">\n        <base-button type=\"secondary\" @click=\"$emit('close')\">\n          Cancelar\n        </base-button>\n        <base-button type=\"primary\" native-type=\"submit\" class=\"my-4\"\n          >Save</base-button\n        >\n      </div>\n    </b-form>\n  </validation-observer>\n</template>\n\n<script>\nimport { TaskRepositoryImpl } from \"@/app/task/infrastructure/repositories/TaskRepositoryImpl\";\nimport { StoreTaskUseCase, UpdateTaskUseCase } from \"@/app/task/usecases\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"TaskForm\",\n\n  props: {\n    initialData: {\n      type: Object,\n      default: () => ({\n        name: \"\",\n        description: null,\n        priority: \"low\",\n        completed: false,\n        expires_at: null,\n        id: null,\n      }),\n    },\n    task: {\n      type: Object,\n      default: () => ({\n        name: \"\",\n        description: \"\",\n        priority: \"low\",\n        completed: false,\n        expires_at: null,\n      }),\n    },\n  },\n\n  data() {\n    return {\n      PriorityOptions: [\n        { value: null, text: \"Selecciona una opcion\" },\n        { value: \"low\", text: \"Baja\" },\n        { value: \"medium\", text: \"Media\" },\n        { value: \"high\", text: \"Alta\" },\n      ],\n      formData: { ...this.task },\n      loading: false,\n      error: null,\n      backendErrors: {\n        name: \"\",\n        lastname: \"\",\n        identification: \"\",\n        email: \"\",\n        password: \"\",\n      },\n    };\n  },\n\n  watch: {\n    task: {\n      deep: true,\n      handler(newVal) {\n        console.log(newVal.value);\n\n        this.formData = { ...newVal };\n      },\n    },\n  },\n\n  methods: {\n    async onSubmit() {\n      try {\n        const taskRepository = new TaskRepositoryImpl();\n        let response;\n        if (this.formData.id) {\n          // Actualizar tarea existente\n          const updateTaskUseCase = new UpdateTaskUseCase(taskRepository);\n          response = await updateTaskUseCase.execute(this.formData);\n          // this.$emit(\"task-updated\", response);\n        } else {\n          // Crear nueva tarea\n          const storeTaskUseCase = new StoreTaskUseCase(taskRepository);\n          response = await storeTaskUseCase.execute(this.formData);\n          // this.$emit(\"task-added\", response);\n        }\n\n        // Limpiar formulario\n        this.formData = {\n          name: \"\",\n          description: null,\n          priority: \"low\",\n          completed: false,\n          expires_at: null,\n        };\n\n        this.$emit(\"task-updated\", null);\n      } catch (error) {\n        if (\n          error.response &&\n          error.response.data &&\n          error.response.data.errors\n        ) {\n          const errors = error.response.data.errors;\n          // Limpia errores anteriores\n          Object.keys(this.backendErrors).forEach((key) => {\n            this.backendErrors[key] = \"\";\n          });\n\n          Object.entries(errors).forEach(([field, messages]) => {\n            if (\n              Object.prototype.hasOwnProperty.call(this.backendErrors, field)\n            ) {\n              this.backendErrors[field] = messages.join(\", \");\n            }\n          });\n        }\n      }\n    },\n  },\n};\n</script>\n"],"mappings":";;AAsEA,SAAAA,kBAAA;AACA,SAAAC,gBAAA,EAAAC,iBAAA;AACA,OAAAC,KAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACAC,WAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,EAAAA,CAAA;QACAL,IAAA;QACAM,WAAA;QACAC,QAAA;QACAC,SAAA;QACAC,UAAA;QACAC,EAAA;MACA;IACA;IACAC,IAAA;MACAR,IAAA,EAAAC,MAAA;MACAC,OAAA,EAAAA,CAAA;QACAL,IAAA;QACAM,WAAA;QACAC,QAAA;QACAC,SAAA;QACAC,UAAA;MACA;IACA;EACA;EAEAG,KAAA;IACA;MACAC,eAAA,GACA;QAAAC,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,EACA;MACAC,QAAA;QAAA,QAAAL;MAAA;MACAM,OAAA;MACAC,KAAA;MACAC,aAAA;QACAnB,IAAA;QACAoB,QAAA;QACAC,cAAA;QACAC,KAAA;QACAC,QAAA;MACA;IACA;EACA;EAEAC,KAAA;IACAb,IAAA;MACAc,IAAA;MACAC,QAAAC,MAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,MAAA,CAAAb,KAAA;QAEA,KAAAE,QAAA;UAAA,GAAAW;QAAA;MACA;IACA;EACA;EAEAG,OAAA;IACA,MAAAC,SAAA;MACA;QACA,MAAAC,cAAA,OAAApC,kBAAA;QACA,IAAAqC,QAAA;QACA,SAAAjB,QAAA,CAAAN,EAAA;UACA;UACA,MAAAwB,iBAAA,OAAApC,iBAAA,CAAAkC,cAAA;UACAC,QAAA,SAAAC,iBAAA,CAAAC,OAAA,MAAAnB,QAAA;UACA;QACA;UACA;UACA,MAAAoB,gBAAA,OAAAvC,gBAAA,CAAAmC,cAAA;UACAC,QAAA,SAAAG,gBAAA,CAAAD,OAAA,MAAAnB,QAAA;UACA;QACA;;QAEA;QACA,KAAAA,QAAA;UACAhB,IAAA;UACAM,WAAA;UACAC,QAAA;UACAC,SAAA;UACAC,UAAA;QACA;QAEA,KAAA4B,KAAA;MACA,SAAAnB,KAAA;QACA,IACAA,KAAA,CAAAe,QAAA,IACAf,KAAA,CAAAe,QAAA,CAAArB,IAAA,IACAM,KAAA,CAAAe,QAAA,CAAArB,IAAA,CAAA0B,MAAA,EACA;UACA,MAAAA,MAAA,GAAApB,KAAA,CAAAe,QAAA,CAAArB,IAAA,CAAA0B,MAAA;UACA;UACAlC,MAAA,CAAAmC,IAAA,MAAApB,aAAA,EAAAqB,OAAA,CAAAC,GAAA;YACA,KAAAtB,aAAA,CAAAsB,GAAA;UACA;UAEArC,MAAA,CAAAsC,OAAA,CAAAJ,MAAA,EAAAE,OAAA,GAAAG,KAAA,EAAAC,QAAA;YACA,IACAxC,MAAA,CAAAyC,SAAA,CAAAC,cAAA,CAAAC,IAAA,MAAA5B,aAAA,EAAAwB,KAAA,GACA;cACA,KAAAxB,aAAA,CAAAwB,KAAA,IAAAC,QAAA,CAAAI,IAAA;YACA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}