{"ast":null,"code":"import es from \"@vee-validate/i18n/dist/locale/es.json\"; // Importar el archivo de idioma español\nexport default {\n  inheritAttrs: false,\n  name: \"base-input\",\n  props: {\n    externalError: {\n      type: String,\n      default: \"\"\n    },\n    required: {\n      type: Boolean,\n      description: \"Whether input is required (adds an asterix *)\"\n    },\n    group: {\n      type: Boolean,\n      description: \"Whether input is an input group (manual override in special cases)\"\n    },\n    alternative: {\n      type: Boolean,\n      description: \"Whether input is of alternative layout\"\n    },\n    label: {\n      type: String,\n      description: \"Input label (text before input)\"\n    },\n    error: {\n      type: String,\n      description: \"Input error (below input)\"\n    },\n    successMessage: {\n      type: String,\n      description: \"Input success message\",\n      default: \"\"\n    },\n    labelClasses: {\n      type: String,\n      description: \"Input label css classes\",\n      default: \"form-control-label\"\n    },\n    inputClasses: {\n      type: String,\n      description: \"Input css classes\"\n    },\n    inputGroupClasses: {\n      type: String,\n      description: \"Input group css classes\"\n    },\n    value: {\n      type: [String, Number],\n      description: \"Input value\"\n    },\n    type: {\n      type: String,\n      description: \"Input type\",\n      default: \"text\"\n    },\n    appendIcon: {\n      type: String,\n      description: \"Append icon (right)\"\n    },\n    prependIcon: {\n      type: String,\n      description: \"Prepend icon (left)\"\n    },\n    rules: {\n      type: [String, Array, Object],\n      description: \"Vee validate validation rules\",\n      default: \"\"\n    },\n    name: {\n      type: String,\n      description: \"Input name (used for validation)\",\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      focused: false\n    };\n  },\n  computed: {\n    listeners() {\n      return {\n        ...this.$listeners,\n        input: this.updateValue,\n        focus: this.onFocus,\n        blur: this.onBlur\n      };\n    },\n    slotData() {\n      return {\n        focused: this.focused,\n        error: this.error,\n        ...this.listeners\n      };\n    },\n    hasIcon() {\n      const {\n        append,\n        prepend\n      } = this.$slots;\n      return append !== undefined || prepend !== undefined || this.appendIcon !== undefined || this.prependIcon !== undefined || this.group;\n    }\n  },\n  methods: {\n    updateValue(evt) {\n      let value = evt.target.value;\n      this.$emit(\"input\", value);\n    },\n    onFocus(evt) {\n      this.focused = true;\n      this.$emit(\"focus\", evt);\n    },\n    onBlur(evt) {\n      this.focused = false;\n      this.$emit(\"blur\", evt);\n    }\n  }\n};","map":{"version":3,"names":["es","inheritAttrs","name","props","externalError","type","String","default","required","Boolean","description","group","alternative","label","error","successMessage","labelClasses","inputClasses","inputGroupClasses","value","Number","appendIcon","prependIcon","rules","Array","Object","data","focused","computed","listeners","$listeners","input","updateValue","focus","onFocus","blur","onBlur","slotData","hasIcon","append","prepend","$slots","undefined","methods","evt","target","$emit"],"sources":["src/components/Inputs/BaseInput.vue"],"sourcesContent":["<template>\n  <validation-provider\n    :rules=\"rules\"\n    :name=\"name\"\n    v-bind=\"$attrs\"\n    v-slot=\"{ errors, valid, invalid, validated }\"\n  >\n    <b-form-group>\n      <slot name=\"label\">\n        <label v-if=\"label\" :class=\"labelClasses\">\n          {{ label }}\n        </label>\n      </slot>\n      <div\n        :class=\"[\n          { 'input-group': hasIcon },\n          { focused: focused },\n          { 'input-group-alternative': alternative },\n          { 'has-label': label || $slots.label },\n          inputGroupClasses,\n        ]\"\n      >\n        <div v-if=\"prependIcon || $slots.prepend\" class=\"input-group-prepend\">\n          <span class=\"input-group-text\">\n            <slot name=\"prepend\">\n              <i :class=\"prependIcon\"></i>\n            </slot>\n          </span>\n        </div>\n        <slot v-bind=\"slotData\">\n          <input\n            :value=\"value\"\n            :type=\"type\"\n            v-on=\"listeners\"\n            v-bind=\"$attrs\"\n            :valid=\"valid\"\n            :required=\"required\"\n            class=\"form-control\"\n            :class=\"[\n              { 'is-valid': valid && validated && successMessage },\n              { 'is-invalid': invalid && validated },\n              inputClasses,\n            ]\"\n          />\n        </slot>\n        <div v-if=\"appendIcon || $slots.append\" class=\"input-group-append\">\n          <span class=\"input-group-text\">\n            <slot name=\"append\">\n              <i :class=\"appendIcon\"></i>\n            </slot>\n          </span>\n        </div>\n        <slot name=\"infoBlock\"></slot>\n      </div>\n      <slot name=\"success\">\n        <div class=\"valid-feedback\" v-if=\"valid && validated && successMessage\">\n          {{ successMessage }}\n        </div>\n      </slot>\n      <slot name=\"error\">\n        <div\n          v-if=\"externalError || errors[0]\"\n          class=\"invalid-feedback\"\n          style=\"display: block\"\n        >\n          {{ externalError || errors[0] }}\n        </div>\n      </slot>\n    </b-form-group>\n  </validation-provider>\n</template>\n<script>\nimport es from \"@vee-validate/i18n/dist/locale/es.json\"; // Importar el archivo de idioma español\nexport default {\n  inheritAttrs: false,\n  name: \"base-input\",\n  props: {\n    externalError: {\n      type: String,\n      default: \"\",\n    },\n    required: {\n      type: Boolean,\n      description: \"Whether input is required (adds an asterix *)\",\n    },\n    group: {\n      type: Boolean,\n      description:\n        \"Whether input is an input group (manual override in special cases)\",\n    },\n    alternative: {\n      type: Boolean,\n      description: \"Whether input is of alternative layout\",\n    },\n    label: {\n      type: String,\n      description: \"Input label (text before input)\",\n    },\n    error: {\n      type: String,\n      description: \"Input error (below input)\",\n    },\n    successMessage: {\n      type: String,\n      description: \"Input success message\",\n      default: \"\",\n    },\n    labelClasses: {\n      type: String,\n      description: \"Input label css classes\",\n      default: \"form-control-label\",\n    },\n    inputClasses: {\n      type: String,\n      description: \"Input css classes\",\n    },\n    inputGroupClasses: {\n      type: String,\n      description: \"Input group css classes\",\n    },\n    value: {\n      type: [String, Number],\n      description: \"Input value\",\n    },\n    type: {\n      type: String,\n      description: \"Input type\",\n      default: \"text\",\n    },\n    appendIcon: {\n      type: String,\n      description: \"Append icon (right)\",\n    },\n    prependIcon: {\n      type: String,\n      description: \"Prepend icon (left)\",\n    },\n    rules: {\n      type: [String, Array, Object],\n      description: \"Vee validate validation rules\",\n      default: \"\",\n    },\n    name: {\n      type: String,\n      description: \"Input name (used for validation)\",\n      default: \"\",\n    },\n  },\n  data() {\n    return {\n      focused: false,\n    };\n  },\n  computed: {\n    listeners() {\n      return {\n        ...this.$listeners,\n        input: this.updateValue,\n        focus: this.onFocus,\n        blur: this.onBlur,\n      };\n    },\n    slotData() {\n      return {\n        focused: this.focused,\n        error: this.error,\n        ...this.listeners,\n      };\n    },\n    hasIcon() {\n      const { append, prepend } = this.$slots;\n      return (\n        append !== undefined ||\n        prepend !== undefined ||\n        this.appendIcon !== undefined ||\n        this.prependIcon !== undefined ||\n        this.group\n      );\n    },\n  },\n  methods: {\n    updateValue(evt) {\n      let value = evt.target.value;\n      this.$emit(\"input\", value);\n    },\n    onFocus(evt) {\n      this.focused = true;\n      this.$emit(\"focus\", evt);\n    },\n    onBlur(evt) {\n      this.focused = false;\n      this.$emit(\"blur\", evt);\n    },\n  },\n};\n</script>\n<style></style>\n"],"mappings":"AAwEA,OAAAA,EAAA;AACA;EACAC,YAAA;EACAC,IAAA;EACAC,KAAA;IACAC,aAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAC,QAAA;MACAH,IAAA,EAAAI,OAAA;MACAC,WAAA;IACA;IACAC,KAAA;MACAN,IAAA,EAAAI,OAAA;MACAC,WAAA,EACA;IACA;IACAE,WAAA;MACAP,IAAA,EAAAI,OAAA;MACAC,WAAA;IACA;IACAG,KAAA;MACAR,IAAA,EAAAC,MAAA;MACAI,WAAA;IACA;IACAI,KAAA;MACAT,IAAA,EAAAC,MAAA;MACAI,WAAA;IACA;IACAK,cAAA;MACAV,IAAA,EAAAC,MAAA;MACAI,WAAA;MACAH,OAAA;IACA;IACAS,YAAA;MACAX,IAAA,EAAAC,MAAA;MACAI,WAAA;MACAH,OAAA;IACA;IACAU,YAAA;MACAZ,IAAA,EAAAC,MAAA;MACAI,WAAA;IACA;IACAQ,iBAAA;MACAb,IAAA,EAAAC,MAAA;MACAI,WAAA;IACA;IACAS,KAAA;MACAd,IAAA,GAAAC,MAAA,EAAAc,MAAA;MACAV,WAAA;IACA;IACAL,IAAA;MACAA,IAAA,EAAAC,MAAA;MACAI,WAAA;MACAH,OAAA;IACA;IACAc,UAAA;MACAhB,IAAA,EAAAC,MAAA;MACAI,WAAA;IACA;IACAY,WAAA;MACAjB,IAAA,EAAAC,MAAA;MACAI,WAAA;IACA;IACAa,KAAA;MACAlB,IAAA,GAAAC,MAAA,EAAAkB,KAAA,EAAAC,MAAA;MACAf,WAAA;MACAH,OAAA;IACA;IACAL,IAAA;MACAG,IAAA,EAAAC,MAAA;MACAI,WAAA;MACAH,OAAA;IACA;EACA;EACAmB,KAAA;IACA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACAC,UAAA;MACA;QACA,QAAAC,UAAA;QACAC,KAAA,OAAAC,WAAA;QACAC,KAAA,OAAAC,OAAA;QACAC,IAAA,OAAAC;MACA;IACA;IACAC,SAAA;MACA;QACAV,OAAA,OAAAA,OAAA;QACAb,KAAA,OAAAA,KAAA;QACA,QAAAe;MACA;IACA;IACAS,QAAA;MACA;QAAAC,MAAA;QAAAC;MAAA,SAAAC,MAAA;MACA,OACAF,MAAA,KAAAG,SAAA,IACAF,OAAA,KAAAE,SAAA,IACA,KAAArB,UAAA,KAAAqB,SAAA,IACA,KAAApB,WAAA,KAAAoB,SAAA,IACA,KAAA/B,KAAA;IAEA;EACA;EACAgC,OAAA;IACAX,YAAAY,GAAA;MACA,IAAAzB,KAAA,GAAAyB,GAAA,CAAAC,MAAA,CAAA1B,KAAA;MACA,KAAA2B,KAAA,UAAA3B,KAAA;IACA;IACAe,QAAAU,GAAA;MACA,KAAAjB,OAAA;MACA,KAAAmB,KAAA,UAAAF,GAAA;IACA;IACAR,OAAAQ,GAAA;MACA,KAAAjB,OAAA;MACA,KAAAmB,KAAA,SAAAF,GAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}